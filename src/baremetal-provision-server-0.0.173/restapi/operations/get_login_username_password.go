package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLoginUsernamePasswordHandlerFunc turns a function with the right signature into a get login username password handler
type GetLoginUsernamePasswordHandlerFunc func(GetLoginUsernamePasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoginUsernamePasswordHandlerFunc) Handle(params GetLoginUsernamePasswordParams) middleware.Responder {
	return fn(params)
}

// GetLoginUsernamePasswordHandler interface for that can handle valid get login username password params
type GetLoginUsernamePasswordHandler interface {
	Handle(GetLoginUsernamePasswordParams) middleware.Responder
}

// NewGetLoginUsernamePassword creates a new http.Handler for the get login username password operation
func NewGetLoginUsernamePassword(ctx *middleware.Context, handler GetLoginUsernamePasswordHandler) *GetLoginUsernamePassword {
	return &GetLoginUsernamePassword{Context: ctx, Handler: handler}
}

/*GetLoginUsernamePassword swagger:route GET /login/{username}/{password} getLoginUsernamePassword

Login user with username and password.


*/
type GetLoginUsernamePassword struct {
	Context *middleware.Context
	Handler GetLoginUsernamePasswordHandler
}

func (o *GetLoginUsernamePassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetLoginUsernamePasswordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
